name: Build LEDE Firmware for Hugsun RT28 - Optimized for Space

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  LEDE_REPO: https://github.com/sy3tem/lede
  FEEDS_CONF: feeds.conf.default

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 240

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install minimal dependencies only
      run: |
        sudo apt update -y
        # 只安装最核心的编译依赖
        sudo apt install -y build-essential ccache cmake curl file g++ gawk gcc \
        gettext git libncurses5-dev libssl-dev make python3 python3-pip rsync \
        unzip wget zlib1g-dev

    - name: Clone LEDE source with minimal history
      run: |
        git clone --depth 1 --single-branch --branch master $LEDE_REPO lede
        cd lede

    - name: Create device definition for Hugsun RT28
      run: |
        cd lede
        # 精简设备定义
        cat >> target/linux/rockchip/image/armv8.mk << 'EOF'

        define Device/hugsun_rt28
          DEVICE_VENDOR := Hugsun
          DEVICE_MODEL := RT28
          SOC := rk3528
          DEVICE_DTS := rockchip/rk3528-hugsun-rt28
          SUPPORTED_DEVICES := hugsun,rt28
          IMAGE/sysupgrade.img.gz := boot-common | boot-script rk3528 | pine64-img | gzip | append-metadata
          DEVICE_PACKAGES := kmod-usb3 kmod-usb-storage kmod-mt7915e kmod-mt7915-firmware wpad-basic-wolfssl
        endef
        TARGET_DEVICES += hugsun_rt28
        EOF

    - name: Update only essential feeds
      run: |
        cd lede
        # 只更新必要的feeds，减少下载量
        ./scripts/feeds update packages luci routing
        ./scripts/feeds install -a -p packages
        ./scripts/feeds install -a -p luci

    - name: Configure minimal target
      run: |
        cd lede
        cat > .config << 'EOF'
        CONFIG_TARGET_rockchip=y
        CONFIG_TARGET_rockchip_armv8=y
        CONFIG_TARGET_rockchip_armv8_DEVICE_hugsun_rt28=y
        
        # 最小系统配置
        CONFIG_TARGET_ROOTFS_PARTSIZE=128
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        CONFIG_TARGET_ROOTFS_EXT4FS=n
        CONFIG_TARGET_ROOTFS_TARGZ=n
        
        # 核心内核模块
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-usb-storage=y
        
        # MT7916AN 无线驱动
        CONFIG_PACKAGE_kmod-mt7915e=y
        CONFIG_PACKAGE_kmod-mt7915-firmware=y
        CONFIG_PACKAGE_wpad-basic-wolfssl=y
        
        # 基础网络功能
        CONFIG_PACKAGE_kmod-ipt-fullcone=y
        CONFIG_PACKAGE_kmod-tcp-bbr=y
        
        # 最小工具集
        CONFIG_PACKAGE_curl=y
        CONFIG_PACKAGE_bash=y
        
        # 最小Luci界面
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-base=y
        CONFIG_PACKAGE_luci-compat=y
        CONFIG_PACKAGE_luci-theme-argon=y
        
        # 系统设置
        CONFIG_TARGET_IPV4_LAN_IP="192.168.8.1"
        CONFIG_VERSION_DIST="Hugsun-RT28"
        
        # 禁用几乎所有非必要包
        CONFIG_PACKAGE_luci-app-accesscontrol=n
        CONFIG_PACKAGE_luci-app-adbyby-plus=n
        CONFIG_PACKAGE_luci-app-aria2=n
        CONFIG_PACKAGE_luci-app-ddns=n
        CONFIG_PACKAGE_luci-app-filetransfer=n
        CONFIG_PACKAGE_luci-app-upnp=n
        CONFIG_PACKAGE_luci-app-vsftpd=n
        CONFIG_PACKAGE_luci-app-wireless=n
        CONFIG_PACKAGE_miniupnpd=n
        CONFIG_PACKAGE_nano=n
        CONFIG_PACKAGE_htop=n
        
        # 禁用Python
        CONFIG_PACKAGE_python3-light=n
        CONFIG_PACKAGE_python3=n
        
        # 禁用其他无线驱动
        CONFIG_PACKAGE_kmod-ath10k=n
        CONFIG_PACKAGE_kmod-ath9k=n
        EOF

    - name: Apply essential configurations only
      run: |
        cd lede
        mkdir -p files/etc/config
        
        # 最小网络配置
        cat > files/etc/config/network << 'EOF'
        config interface 'loopback'
            option ifname 'lo'
            option proto 'static'
            option ipaddr '127.0.0.1'
            option netmask '255.0.0.0'

        config device
            option name 'br-lan'
            option type 'bridge'
            list ifname 'eth0'

        config interface 'lan'
            option device 'br-lan'
            option proto 'static'
            option ipaddr '192.168.8.1'
            option netmask '255.255.255.0'

        config interface 'wan'
            option ifname 'eth1'
            option proto 'dhcp'
        EOF

        # 最小无线配置
        cat > files/etc/config/wireless << 'EOF'
        config wifi-device 'radio0'
            option type 'mac80211'
            option path 'pci0001:00/0001:00:00.0/0001:01:00.0'
            option channel '36'
            option band '5g'
            option htmode 'HE80'
            option disabled '0'

        config wifi-iface 'default_radio0'
            option device 'radio0'
            option network 'lan'
            option mode 'ap'
            option ssid 'Hugsun-RT28-5G'
            option encryption 'psk2'
            option key '12345678'

        config wifi-device 'radio1'
            option type 'mac80211'
            option path 'pci0001:00/0001:00:00.0/0001:02:00.0'
            option channel 'auto'
            option band '2g'
            option htmode 'HE20'
            option disabled '0'

        config wifi-iface 'default_radio1'
            option device 'radio1'
            option network 'lan'
            option mode 'ap'
            option ssid 'Hugsun-RT28'
            option encryption 'psk2'
            option key '12345678'
        EOF

        # 最小防火墙配置
        cat > files/etc/config/firewall << 'EOF'
        config defaults
            option input 'ACCEPT'
            option output 'ACCEPT'
            option forward 'REJECT'
            option fullcone '1'

        config zone
            option name 'lan'
            option input 'ACCEPT'
            option output 'ACCEPT'
            option forward 'ACCEPT'
            option network 'lan'

        config zone
            option name 'wan'
            option input 'REJECT'
            option output 'ACCEPT'
            option forward 'REJECT'
            option masq '1'
            option network 'wan'

        config forwarding
            option src 'lan'
            option dest 'wan'
        EOF

        # 最小启动脚本
        mkdir -p files/etc/uci-defaults
        cat > files/etc/uci-defaults/99-init << 'EOF'
        #!/bin/sh
        echo -e "password\npassword" | passwd root
        exit 0
        EOF
        chmod +x files/etc/uci-defaults/99-init

    - name: Run defconfig
      run: |
        cd lede
        make defconfig

    - name: Clean system before download
      run: |
        sudo apt clean
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /usr/share/doc/*
        sudo rm -rf /usr/share/man/*
        docker system prune -af 2>/dev/null || true

    - name: Download packages with retry
      run: |
        cd lede
        # 分步下载，避免内存和磁盘压力
        for i in 1 2 3; do
          if make download -j2; then
            break
          fi
          echo "下载失败，重试 $i/3"
          sleep 10
        done

    - name: Clean downloads after download
      run: |
        cd lede
        # 删除下载的压缩包，只保留解压后的源文件
        find dl -name "*.tar.gz" -o -name "*.tar.xz" -o -name "*.zip" -delete 2>/dev/null || true

    - name: Build firmware with single thread and cleanup
      run: |
        cd lede
        echo "开始单线程编译以节省内存..."
        make clean
        # 使用单线程编译，减少临时文件占用
        if ! make -j1 V=s; then
          echo "编译失败，尝试深度清理后重新编译..."
          # 深度清理
          rm -rf tmp/build_dir/*
          rm -rf tmp/staging_dir/*
          find . -name "*.o" -delete 2>/dev/null || true
          find . -name "*.a" -delete 2>/dev/null || true
          # 再次尝试编译
          make -j1 V=s
        fi

    - name: Immediate cleanup after build
      run: |
        cd lede
        # 立即清理编译文件
        rm -rf build_dir/*
        rm -rf staging_dir/*
        rm -rf tmp/*
        find . -name "*.o" -delete 2>/dev/null || true
        find . -name "*.a" -delete 2>/dev/null || true

    - name: Check and list firmware
      run: |
        cd lede
        echo "固件文件:"
        find bin/targets -name "*.img" -o -name "*.gz" -o -name "*.bin" 2>/dev/null | head -10
        du -sh bin/targets/rockchip/armv8/ 2>/dev/null || echo "目标目录不存在"

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hugsun-rt28-minimal-firmware
        path: |
          lede/bin/targets/rockchip/armv8/*.img
          lede/bin/targets/rockchip/armv8/*.gz
          lede/bin/targets/rockchip/armv8/*.bin
        if-no-files-found: error
        retention-days: 5

    - name: Final cleanup
      if: always()
      run: |
        # 最终清理释放所有可能的空间
        sudo apt clean
        sudo rm -rf /var/lib/apt/lists/*
        sudo rm -rf /usr/share/doc/*
        sudo rm -rf /usr/share/man/*
        docker system prune -af 2>/dev/null || true
        
        cd lede 2>/dev/null && {
          rm -rf dl/*
          rm -rf tmp/*
          rm -rf build_dir/*
          rm -rf staging_dir/*
          rm -rf logs/*
          find . -name "*.o" -delete 2>/dev/null || true
          find . -name "*.a" -delete 2>/dev/null || true
        } || true
